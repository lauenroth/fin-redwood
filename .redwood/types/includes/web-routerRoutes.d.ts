// This file was generated by RedwoodJS
import '@redwoodjs/router'
import { A } from 'ts-toolbelt'



type RouteParams<Route> = Route extends `${string}/${infer Rest}`
  ? A.Compute<ParsedParams<Rest>>
  : {}

type QueryParams = Record<string | number, string | number | boolean>

declare module '@redwoodjs/router' {
  interface AvailableRoutes {
    // Only "<Route />" components with a "name" and "path" prop will be populated here.
    dashboard: (params?: RouteParams<"/"> & QueryParams) => "/"
    newTimeTracking: (params?: RouteParams<"/time-tracking/new"> & QueryParams) => "/time-tracking/new"
    editTimeTracking: (params?: RouteParams<"/time-tracking/{id:Int}/edit"> & QueryParams) => "/time-tracking/{id:Int}/edit"
    timeTracking: (params?: RouteParams<"/time-tracking/{id:Int}"> & QueryParams) => "/time-tracking/{id:Int}"
    timeTrackings: (params?: RouteParams<"/time-tracking"> & QueryParams) => "/time-tracking"
    invoices: (params?: RouteParams<"/invoices"> & QueryParams) => "/invoices"
    editInvoice: (params?: RouteParams<"/invoices/{id:Int}/edit"> & QueryParams) => "/invoices/{id:Int}/edit"
    invoice: (params?: RouteParams<"/invoices/{id:Int}"> & QueryParams) => "/invoices/{id:Int}"
    newInvoice: (params?: RouteParams<"/invoices/new"> & QueryParams) => "/invoices/new"
    transactions: (params?: RouteParams<"/transactions"> & QueryParams) => "/transactions"
    editTransaction: (params?: RouteParams<"/transactions/{id:Int}/edit"> & QueryParams) => "/transactions/{id:Int}/edit"
    transaction: (params?: RouteParams<"/transactions/{id:Int}"> & QueryParams) => "/transactions/{id:Int}"
    newTransaction: (params?: RouteParams<"/transactions/new"> & QueryParams) => "/transactions/new"
    transactionImport: (params?: RouteParams<"/transaction-import"> & QueryParams) => "/transaction-import"
    timeTracking: (params?: RouteParams<"/time-tracking"> & QueryParams) => "/time-tracking"
    newTimeTracking: (params?: RouteParams<"/time-tracking/new"> & QueryParams) => "/time-tracking/new"
    clients: (params?: RouteParams<"/clients"> & QueryParams) => "/clients"
    editClient: (params?: RouteParams<"/clients/{id:Int}/edit"> & QueryParams) => "/clients/{id:Int}/edit"
    client: (params?: RouteParams<"/clients/{id:Int}"> & QueryParams) => "/clients/{id:Int}"
    newClient: (params?: RouteParams<"/clients/new"> & QueryParams) => "/clients/new"
    settings: (params?: RouteParams<"/settings"> & QueryParams) => "/settings"
  }
}

type ParamType<constraint> = constraint extends 'Int'
  ? number
  : constraint extends 'Boolean'
  ? boolean
  : constraint extends 'Float'
  ? number
  : string

// Path string parser for Redwood Routes
type ParsedParams<PartialRoute> =
  // {a:Int}/[...moar]
  PartialRoute extends `{${infer Param}:${infer Constraint}}/${infer Rest}`
    ? // check for greedy match e.g. {b}/{c:Int}
      // Param = b}/{c, Rest2 = {c, Constrait = Int so we reconstruct the old one {c + : + Int + }
      Param extends `${infer Param2}}/${infer Rest2}`
      ? { [ParamName in Param2]: string } &
          ParsedParams<`${Rest2}:${Constraint}}`> &
          ParsedParams<`${Rest}`>
      : { [Entry in Param]: ParamType<Constraint> } & ParsedParams<`${Rest}`>
    : // has type, but at the end e.g.{d:Int}
    PartialRoute extends `{${infer Param}:${infer Constraint}}`
    ? // Greedy match order 2
      Param extends `${infer Param2}}/${infer Rest2}`
      ? { [ParamName in Param2]: string } &
          ParsedParams<`${Rest2}:${Constraint}}`>
      : { [Entry in Param]: ParamType<Constraint> }
    : // no type, but has stuff ater it {c}/{d}
    PartialRoute extends `{${infer Param}}/${infer Rest}`
    ? { [ParamName in Param]: string } & ParsedParams<`${Rest}`>
    : // last one with no type e.g. {d}
    PartialRoute extends `{${infer Param}}`
    ? { [ParamName in Param]: string }
    : // if theres a non param
    PartialRoute extends `${string}/${infer Rest}`
    ? ParsedParams<`${Rest}`>
    : {}
